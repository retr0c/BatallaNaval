class Jugador:
    """Clase para el manejo de usuarios del juego."""

    def __init__(self, usuario=None, contrase√±a=None):
        """
        Inicializa la clase Jugador con un usuario opcional.

        Args:
            usuario (str, optional): Nombre del usuario.
            contrase√±a (str, optional): Contrase√±a del usuario.
        """
        self.usuarios = {}
        self.usuario_actual = None
        if usuario and contrase√±a:
            self.usuarios[usuario] = contrase√±a

    def crear_cuenta(self, usuario, contrase√±a):
        """
        Crea una nueva cuenta de usuario.

        Args:
            usuario (str): Nombre del usuario.
            contrase√±a (str): Contrase√±a del usuario.

        Returns:
            str: Mensaje indicando el resultado de la operaci√≥n.
        """
        if usuario == "" and contrase√±a == "":
            return "Las credenciales no pueden estar vac√≠as"
        if not usuario:
            return "El usuario no puede estar vac√≠o"
        if not contrase√±a:
            return "La contrase√±a no puede estar vac√≠a"
        if usuario in self.usuarios:
            return "El usuario ya existe"

        self.usuarios[usuario] = contrase√±a
        return "Cuenta creada exitosamente"

    def iniciar_sesion(self, usuario, contrase√±a):
        """
        Inicia sesi√≥n con las credenciales dadas.

        Args:
            usuario (str): Nombre del usuario.
            contrase√±a (str): Contrase√±a del usuario.

        Returns:
            str: Mensaje indicando el resultado del intento de inicio de sesi√≥n.

        Raises:
            TypeError: Si usuario o contrase√±a son None.
        """
        if usuario is None or contrase√±a is None:
            raise TypeError("Los valores no pueden ser None")
        if not usuario and not contrase√±a:
            return "Credenciales incompletas"
        if not usuario:
            return "Usuario no puede estar vac√≠o"
        if not contrase√±a:
            return "Contrase√±a no puede estar vac√≠a"
        if usuario not in self.usuarios:
            return "Usuario no encontrado"
        if self.usuarios[usuario] != contrase√±a:
            return "Contrase√±a incorrecta"

        self.usuario_actual = usuario
        return "Sesi√≥n iniciada"

    def cerrar_sesion(self):
        """
        Cierra la sesi√≥n del usuario actual.
        """
        if self.usuario_actual:
            print(f"üëã {self.usuario_actual}, has cerrado sesi√≥n.")
            self.usuario_actual = None
        else:
            print("‚ö† No hay ninguna sesi√≥n activa.")

    def cambiar_contrase√±a(self, nueva_contrase√±a):
        """
        Cambia la contrase√±a del usuario actual.

        Args:
            nueva_contrase√±a (str): La nueva contrase√±a.

        Returns:
            str: Mensaje indicando el resultado de la operaci√≥n.

        Raises:
            TypeError: Si la contrase√±a es None o no es una cadena.
        """
        if nueva_contrase√±a is None:
            raise TypeError("La contrase√±a no puede ser None")
        if not nueva_contrase√±a:
            return "La contrase√±a no puede estar vac√≠a"
        if not isinstance(nueva_contrase√±a, str):
            raise TypeError("La contrase√±a debe ser una cadena de texto")
        if len(nueva_contrase√±a) < 6:
            return "Contrase√±a demasiado corta"
        if len(nueva_contrase√±a) > 100:
            return "Contrase√±a demasiado larga"

        for usuario, contrase√±a_actual in self.usuarios.items():
            if nueva_contrase√±a == contrase√±a_actual:
                return "La nueva contrase√±a no puede ser igual a la actual"
            self.usuarios[usuario] = nueva_contrase√±a
            return "Contrase√±a cambiada exitosamente"

        return "No hay usuarios registrados"
